<?php
/**
 * $Id$
 *
 * InterCom - an advanced private messaging solution for Zikula
 *
 */

/**
 * the administration startpage
 *
 * @author
 * @version
 * @return output The main module admin page.
 */
function InterCom_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('InterCom::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $pntable = pnDBGetTables();
    $messagescolumn = $pntable['intercom_column'];

    $inbox   = DBUtil::selectObjectSum('intercom', 'msg_inbox', "WHERE $messagescolumn[msg_inbox]='1'");
    if(is_null($inbox) || !$inbox) {
        $inbox = 0;
    }
    $outbox  = DBUtil::selectObjectSum('intercom', 'msg_outbox', "WHERE $messagescolumn[msg_outbox]='1'");
    if(is_null($outbox) || !$outbox) {
        $outbox = 0;
    }
    $archive = DBUtil::selectObjectSum('intercom', 'msg_stored', "WHERE $messagescolumn[msg_stored]='1'");
    if(is_null($archive) || !$archive) {
        $archive = 0;
    }
    $renderer = & pnRender::getInstance('InterCom', false);

    $renderer->assign(array('inbox'              => $inbox,
                            'outbox'             => $outbox,
                            'archive'            => $archive));

    // Return the output that has been generated by this function
    return $renderer->fetch('intercom_admin_main.htm');
}

/**
 * the modifyconfig administration function
 *
 * @author
 * @version
 * @return output The main module admin page.
 */
function InterCom_admin_modifyconfig()
{
    if (!SecurityUtil::checkPermission('InterCom::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    Loader::requireOnce('modules/InterCom/pnincludes/intercom_admin_modifyconfighandler.class.php');

    // Create output object
    $pnf = FormUtil::newpnForm('InterCom');

    // Return the output that has been generated by this function
    return $pnf->pnFormExecute('intercom_admin_modifyconfig.htm', new intercom_admin_modifyconfighandler());
}

function InterCom_admin_tools()
{
    // Security check
    if (!SecurityUtil::checkPermission('InterCom::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $renderer = & pnRender::getInstance('InterCom', false);
    return $renderer->fetch('intercom_admin_tools.htm');
}

/**
 * DB Tools
 *
 * @author
 * @version
 * @param  $
 */
function InterCom_admin_dbtools()
{
    $dom = ZLanguage::getModuleDomain('InterCom');
    // Security check
    if (!SecurityUtil::checkPermission('InterCom::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    // Get parameters
    $intercom_operation = FormUtil::getPassedValue('operation', '', 'GETPOST');

    // to do: better information to the user if the action was successful or not! - DONE
    switch ($intercom_operation) {
        case "delete_all":
            if (!pnModAPIFunc('InterCom', 'admin', 'delete_all')) {
                return LogUtil::registerError(__('Error! Could not delete all messages.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Deleted all messages.', $dom));
            }
            break;

        case "delete_inboxes":
            if (!pnModAPIFunc('InterCom', 'admin', 'delete_inboxes')) {
                return LogUtil::registerError(__('Error! Could not empty inboxes.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Emptied inboxes.', $dom));
            }
            break;

        case "delete_outboxes":
            if (!pnModAPIFunc('InterCom', 'admin', 'delete_outboxes')) {
                return LogUtil::registerError(__('Error! Could not empty outboxes.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Emptied outboxes.', $dom));
            }
            break;

        case "delete_archives":
            if (!pnModAPIFunc('InterCom', 'admin', 'delete_archives')) {
                return LogUtil::registerError(__('Error! Could not empty archives.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Emptied archives.', $dom));
            }
            break;

        case "optimize_db":
            if (!pnModAPIFunc('InterCom', 'admin', 'optimize_db')) {
                return LogUtil::registerError(__('Error! Could not optimise tables.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Optimised tables.', $dom));
            }
            break;

        case "reset_to_defaults":
            if (!pnModAPIFunc('InterCom', 'admin', 'default_config')) {
                return LogUtil::registerError(__('Error! Could not reset settings to default values.', $dom), null, pnModURL('InterCom', 'admin', 'tools'));
            }
            else {
                LogUtil::registerStatus(__('Done! Reset settings to default values.', $dom));
            }
            break;

        case "import_form_native":
            if (!pnModAPIFunc('InterCom', 'init', 'import_form_native')) {
                return LogUtil::registerError(__('Error! Could not import messages from \'Messages\' module.', $dom), null, pnModURL('InterCom', 'admin', 'main'));
            }
            else {
                LogUtil::registerStatus(__('Done! Imported messages from the \'Messages\' module.', $dom));
            }
            break;

        default:
            return pnRedirect(pnModURL('InterCom', 'admin', 'tools'));
            break;
    }

    // This function generated no output, and so now it is complete we redirect
    // the user to an appropriate page for them to carry on their work
    return pnRedirect(pnModURL('InterCom', 'admin', 'tools'));
}
