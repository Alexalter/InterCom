<?php
/**
 * InterCom Module for Zikula
 *
 * @copyright  InterCom Team
 * @license    GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package    InterCom
 * @subpackage User
 *
 * Please see the CREDITS.txt file distributed with this source code for further
 * information regarding copyright.
 */

namespace Zikula\Module\IntercomModule\Controller;

use ModUtil;
use System;
use SecurityUtil;
use ServiceUtil;
use UserUtil;
use Zikula\Core\Controller\AbstractController;

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; // used in annotations - do not remove
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method; // used in annotations - do not remove
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\RouterInterface;

use Zikula\Module\IntercomModule\Util\Tools;

/**
 * @Route("/admin")
 */
class AdminController extends \Zikula_AbstractController
{ 
    public function postInitialize()
    {
        $this->view->setCaching(false);
    }

    /**
     * @Route("")
     *
     * the main administration function
     *
     * @return RedirectResponse
     */
    public function indexAction(Request $request)
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        $inbox = $this->entityManager
                    ->getRepository('Zikula\Module\IntercomModule\Entity\MessageEntity')
                    ->getAll(array('inbox' => 1, 'countonly' => true));
        if(is_null($inbox) || !$inbox) {
            $inbox = 0;
        }
   
        $outbox  = $this->entityManager
                    ->getRepository('Zikula\Module\IntercomModule\Entity\MessageEntity')
                    ->getAll(array('outbox' => 1, 'countonly' => true));
        if(is_null($outbox) || !$outbox) {
            $outbox = 0;
        }
        $archive = $this->entityManager
                    ->getRepository('Zikula\Module\IntercomModule\Entity\MessageEntity')
                    ->getAll(array('stored' => 1, 'countonly' => true));
        if(is_null($archive) || !$archive) {
            $archive = 0;
        }
        
        $this->view->assign(array('inbox'              => $inbox,
                'outbox'             => $outbox,
                'archive'            => $archive));

        // Return the output that has been generated by this function
        return new Response($this->view->fetch('Admin/index.tpl'));
    }

    /**
     * @Route("/preferences")
     *
     * @return Response symfony response object
     *
     * @throws AccessDeniedException Thrown if the user doesn't have admin access to the module
     */
    public function preferencesAction(Request $request)
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        if ($request->isMethod('Post')){
            $this->checkCsrfToken();
            
            
            
        }    
        // assign all the module vars
        $this->view->assign($this->getVars());
        // Return the output that has been generated by this function
        return new Response($this->view->fetch('Admin/modifyconfig.tpl'));
    }
    
    /**
     * @Route("/tools")
     *
     * @return Response symfony response object
     *
     * @throws AccessDeniedException Thrown if the user doesn't have admin access to the module
     */
    public function toolsAction(Request $request)
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }        

        //$this->checkCsrfToken();
        //$dom = ZLanguage::getModuleDomain('InterCom');
        // Get parameters
        $operation = $request->query->get('operation', false);
        if ($operation === false){
           return new Response($this->view->fetch('Admin/tools.tpl'));        
        }
        $tools = new Tools();
        // to do: better information to the user if the action was successful or not! - DONE
        switch ($operation) {
            case "delete_all":
                if ($tools->delete_all()) {                   
                    $request->getSession()->getFlashBag()->add('status', $this->__('Done! Deleted all messages.'));
                } else {
                    $request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not delete all messages.'));
                }
                break;
            case "delete_inboxes":
                if ($tools->delete_inboxes()) {
                    $request->getSession()->getFlashBag()->add('status', $this->__('Done! Emptied inboxes.'));
                } else {
                    $request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not empty inboxes.'));
                }
                break;
            case "delete_outboxes":
                if ($tools->delete_outboxes()) {
                    $request->getSession()->getFlashBag()->add('status', $this->__('Done! Emptied outboxes.'));
                } else {
                    $request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not empty outboxes.'));
                }
                break;
            case "delete_archives":
                if ($tools->delete_archives()) {
                    $request->getSession()->getFlashBag()->add('status', $this->__('Done! Emptied archives.'));
                } else {
                    $request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not empty archives.'));
                }
                break;
            case "optimize_db":
                if ($tools->optimize_db()) {
                    $request->getSession()->getFlashBag()->add('status', $this->__('Done! Optimised tables.'));
                } else {
                    $request->getSession()->getFlashBag()->add('error', $this->__('Error! Could not optimise tables.'));
                }
                break;
            case "reset_to_defaults":
                if ($tools->resetSettings()) {
                    $request->getSession()->getFlashbag()->add('status', $this->__('Done! Reset settings to default values.'));  
                } else {
                    $request->getSession()->getFlashbag()->add('error', $this->__('Error! Could not reset settings to default values.'));             
                }                
                break;
            case "import_form_native":
                if ($tools->import_form_native()) {
                    $request->getSession()->getFlashbag()->add('status',$this->__('Done! Imported messages from the \'Messages\' module.'));
                } else {
                    $request->getSession()->getFlashbag()->add('error', $this->__('Error! Could not import messages from \'Messages\' module.'));
                }
                break;
            default:
                return new RedirectResponse($this->get('router')->generate('zikulaintercommodule_admin_tools', array(), RouterInterface::ABSOLUTE_URL));
        }
    return new RedirectResponse($this->get('router')->generate('zikulaintercommodule_admin_tools', array(), RouterInterface::ABSOLUTE_URL));        
    }
}